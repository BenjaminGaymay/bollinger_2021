#!/usr/bin/env python3
""" Bollinger Bands """

import sys
from help_file import print_help
from output_variables import OutputVariables
from calcul import std_deviation, moving_average, calcul_bands
import matplotlib.pyplot as plt


def isfloat(line):
    """ Vérifier si une ligne est un nombre flotant """

    try:
        float(line)
        return True
    except ValueError:
        return False


def split_file(file, args, period=True):
    """ Formater le fichier en tableau """

    array = file.split('\n')
    array = [line.strip(' ') for line in array if isfloat(line)]

    if period is True:
        array = array[:args["index"] + 1]
        return array[-args["period"]:]
    return array


def get_file(file):
    """ Récupérer le contenu d'un fichier """

    try:
        with open(file, "r") as file_fd:
            content = file_fd.read()
    except IOError:
        print("Error: File '%s' doesn't exist" % file, file=sys.stderr)
        return None
    return content


def show_input(args):
    """ Afficher les inputs """

    print("Input:\nIndex: %d" % args["index"])
    print("Period: %d" % args["period"])
    print("SD_coef: %.2f\n" % args["sd_coef"])


def show_output(resuls):
    """ Afficher les outputs """

    print("Output:\nMA: %.2f" % resuls.get_ma())
    print("SD: %.2f" % resuls.get_sd())
    print("B+: %.2f" % resuls.get_plus())
    print("B-: %.2f" % resuls.get_minus())


def fill_results(array, args, results):
    """ Récupérer les valeurs calculées """

    results.set_ma(moving_average(array))
    results.set_sd(std_deviation(results, array))
    results.set_plus(calcul_bands(results, args["sd_coef"]))
    results.set_minus(calcul_bands(results, args["sd_coef"], False))


def check_args(argv):
    """ Gestion des arguments """

    if len(argv) >= 2 and argv[1] in ["-h", "--help"]:
        print_help()
        exit(0)
    elif len(argv) < 5:
        print_help()
        return None

    try:
        args = {
            "period": int(argv[1]),
            "sd_coef": float(argv[2]),
            "file": str(argv[3]),
            "index": int(argv[4])
        }
    except ValueError:
        print("Error: Bad argument", file=sys.stderr)
        return None

    return args


def main():
    """ Fonction main """

    args = check_args(sys.argv)
    if not args:
        return False

    content = get_file(args["file"])
    if content is None:
        return False
    array = split_file(content, args)

    results = OutputVariables()

    fill_results(array, args, results)
    show_input(args)
    show_output(results)
    return 0


if __name__ == "__main__":
    if not main():
        exit(84)
